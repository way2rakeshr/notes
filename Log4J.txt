			Log4J Tool
			Mr. Raghu
-----------------------------------------------------------------
Facebook:
	https://www.facebook.com/groups/thejavatemple/

Environment: System where application is running with all setup 
Type of Env:  a. DEV    b. QA    c. UAT   d. Production

=> While Developing and Testing applications, messages are printed on console
   in IDE(STS/Eclipse).
=> Messages like Success, Warning, Errors/Exceptions..etc
=> console section will display last 100/200 messages only.

===============================================================
Logging : It is a process of getting/fetching 
	Success, Warning, Errors/Exceptions messages
          from Server  while it is running.

=> Log4J is a Logging Tool.

=> By using Log4J, we can get log messages and store in 
   File (Log File)**** [___.log]
   Database
   Email (send Mail)
   Console (Print on Console- Dev Env).


=> By using Log Files, Dev/Support Teams identifies the mistakes and Fix code.

   ===================================================================
			Log4J Components

          a. Logger        b. Appender         c. Layout
        (which class)     (where to print)     (how to print)

a. Logger Object :
=> This object must be created inside class for which Log4J is required.
=> Ex: Controllers, Services, Repository ..etc Needs Log4J Server
   if we get any exception/errors inside these classes 
    we can trace those into Log File.
=> DO NOT CREATE logger object if we dont want to Logging for class
   Ex: Model/Entity

Ex:
  private static Logger log=Logger.getLogger(TestApp.class);
  private static Logger log=Logger.getLogger(EmployeeRestController.class);


b. Appender :
   Appender is used to specify where to store Log Message.

Types are:
1. ConsoleAppender  : print log message on console
2. FileAppender **  : Store log message in .log file
3. JdbcAppender     : Store log message inside Database table.
4. Ftp/TelnetAppender : Send data from one server to another Server.
5. SMTP Appender     : Send Log mesage using email.


c. Layout: It indicates Message Format that should be printed on Appender.
1. Simple Layout : Print message as it is given by application
2. HTML Layout   : Print message as HTML file
3. XML Layout    : Print message as XML Output
4.*** Pattern Layout : Print message as Given pattern by Programmer
  


--------------------------------------------------------------
Priority Methods:-
 These are pre-defined methods given inside Logger Object.
 By using these methods, we have to print messages at Appender.

-------------------------------------------------
	Slno      NAME           Method
-------------------------------------------------
	1.	  DEBUG		debug(msg)
	2.        INFO          info(msg)
	3.        WARN          warn(msg)
	4.        ERROR         error(msg)
	5.        FATAL         fatal(msg)
	-NA-       OFF            -NA-
-------------------------------------------------
DEBUG* : This method is used to print a final/success message.
Ex:  Employee created with ID-EMP-3652 Successfully

INFO* : This method is used to print current status in execution
ex: Request cam to Controller method.
    Object sent to Service layer.
    Service Returned back to Controller
    try block execution completed.


WARN : This method is used to print Warnings in application
Ex: File Object is created but never closed.
    Variable is created, but not used.


ERROR* : This method is used to print any general exception
Ex:  NullPointerException, ArrayIndexOutOfBoundsException..etc
    Application Id is null can not be processed.


FATAL: This method is used to print any High level exception that makes 
        STOPING application usage.

Ex: Database connection is not woking.
    Network server/Middleware server is Down.

=========Ex#1============================================
1. Create Maven Application
2. pom.xml
	<properties>
		<maven.compiler.source>1.8</maven.compiler.source>
		<maven.compiler.target>1.8</maven.compiler.target>
	</properties>
	<dependencies>
		<dependency>
			<groupId>log4j</groupId>
			<artifactId>log4j</artifactId>
			<version>1.2.17</version>
		</dependency>
	</dependencies>

3. Test class
package in.nit;

import org.apache.log4j.Appender;
import org.apache.log4j.ConsoleAppender;
import org.apache.log4j.Layout;
import org.apache.log4j.Logger;
import org.apache.log4j.SimpleLayout;

public class TestApp {
	//3.Create Logger object
	private static Logger log=Logger.getLogger(TestApp.class);
	
	public static void main(String[] args) {
		//1. Create layout
		Layout layout=new SimpleLayout();
		//2. create appender + link layout
		Appender app=new ConsoleAppender(layout);
		
		//4. link appender with logger
		log.addAppender(app);
		
		
		//---Print Messages--------------
		log.info("FROM INFO");
		log.debug("FROM DEBUG");
		log.fatal("FROM FATAL");
		log.error("FROM ERROR");
		log.warn("FROM WANR");
	}
}
==============Example#2======================================
package in.nit;

import org.apache.log4j.Appender;
import org.apache.log4j.ConsoleAppender;
import org.apache.log4j.Layout;
import org.apache.log4j.Logger;
import org.apache.log4j.PatternLayout;

public class TestApp {
	//3.Create Logger object
	private static Logger log=Logger.getLogger(TestApp.class);
	
	public static void main(String[] args) {
		//1. Create layout
		//Layout layout=new HTMLLayout();
		//Layout layout=new SimpleLayout();
		
		//Layout layout=new XMLLayout();
		Layout layout=new PatternLayout("%p %d %C %M  %m %n");
		
		//2. create appender + link layout
		Appender app=new ConsoleAppender(layout);
		
		//4. link appender with logger
		log.addAppender(app);
		
		
		//---Print Messages--------------
		log.info("FROM INFO");
		log.debug("FROM DEBUG");
		log.fatal("FROM FATAL");
		log.error("FROM ERROR");
		log.warn("FROM WANR");
	}
}
============Example#3====================================
package in.nit;

import java.io.IOException;

import org.apache.log4j.Appender;
import org.apache.log4j.ConsoleAppender;
import org.apache.log4j.FileAppender;
import org.apache.log4j.Layout;
import org.apache.log4j.Logger;
import org.apache.log4j.PatternLayout;

public class TestApp {
	//3.Create Logger object
	private static Logger log=Logger.getLogger(TestApp.class);
	
	public static void main(String[] args) throws Exception {
		//1. Create layout
		//Layout layout=new HTMLLayout();
		//Layout layout=new SimpleLayout();
		
		//Layout layout=new XMLLayout();
		Layout layout=new PatternLayout("%p %d %C %M  %m %n");
		
		//2. create appender + link layout
		//Appender app=new ConsoleAppender(layout);
		Appender app=new FileAppender(layout, "D:/mylogs/data.log");
		
		//4. link appender with logger
		log.addAppender(app);
		
		
		//---Print Messages--------------
		log.info("FROM INFO");
		log.debug("FROM DEBUG");
		log.fatal("FROM FATAL");
		log.error("FROM ERROR");
		log.warn("FROM WANR");
	}
}
========================================================================
